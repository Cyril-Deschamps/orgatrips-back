name: Deploy

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/}  | tr a-z A-Z)"
        id: extract_branch

      - name: Create .env
        run: |
          touch .env
          echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> .env
          echo "APP_MAILJET_PUBLIC_KEY=${{ secrets.APP_MAILJET_PUBLIC_KEY }}" >> .env
          echo "APP_MAILJET_PRIVATE_KEY=${{ secrets.APP_MAILJET_PRIVATE_KEY }}" >> .env
          echo "APP_MAILJET_SENDER_MAIL=${{ secrets.APP_MAILJET_SENDER_MAIL }}" >> .env
          echo "APP_KIWI_PUBLIC_KEY=${{ secrets.APP_KIWI_PUBLIC_KEY }}" >> .env
          echo "APP_CORS_ORIGIN=${{ secrets.APP_CORS_ORIGIN }}" >> .env

      - name: Add .env variable based on branch development
        if: ${{ steps.extract_branch.outputs.branch == 'DEVELOPMENT' }}
        run: |
          echo "APP_DB_HOST=${{ secrets.DEVELOPMENT_APP_DB_HOST }}" >> .env
          echo "APP_DB_USER=${{ secrets.DEVELOPMENT_APP_DB_USER }}" >> .env
          echo "APP_DB_PASSWORD=${{ secrets.DEVELOPMENT_APP_DB_PASSWORD }}" >> .env
          echo "APP_DB_NAME=${{ secrets.DEVELOPMENT_APP_DB_NAME }}" >> .env
          echo "APP_BACKEND_PUBLIC_URL=${{ secrets.DEVELOPMENT_APP_BACKEND_PUBLIC_URL }}" >> .env
          echo "APP_FRONTEND_PUBLIC_URL=${{ secrets.DEVELOPMENT_APP_FRONTEND_PUBLIC_URL }}" >> .env
          echo "APP_TRANSPORTATION_BUDGET_PERCENTAGE=${{ secrets.DEVELOPMENT_APP_TRANSPORTATION_BUDGET_PERCENTAGE }}" >> .env
          echo "APP_ACCOMODATION_BUDGET_PERCENTAGE=${{ secrets.DEVELOPMENT_APP_ACCOMODATION_BUDGET_PERCENTAGE }}" >> .env

      - name: Add .env variable based on branch development
        if: ${{ steps.extract_branch.outputs.branch == 'PRODUCTION' }}
        run: |
          echo "APP_DB_HOST=${{ secrets.PRODUCTION_APP_DB_HOST }}" >> .env
          echo "APP_DB_USER=${{ secrets.PRODUCTION_APP_DB_USER }}" >> .env
          echo "APP_DB_PASSWORD=${{ secrets.PRODUCTION_APP_DB_PASSWORD }}" >> .env
          echo "APP_DB_NAME=${{ secrets.PRODUCTION_APP_DB_NAME }}" >> .env
          echo "APP_BACKEND_PUBLIC_URL=${{ secrets.PRODUCTION_APP_BACKEND_PUBLIC_URL }}" >> .env
          echo "APP_FRONTEND_PUBLIC_URL=${{ secrets.PRODUCTION_APP_FRONTEND_PUBLIC_URL }}" >> .env
          echo "APP_TRANSPORTATION_BUDGET_PERCENTAGE=${{ secrets.PRODUCTION_APP_TRANSPORTATION_BUDGET_PERCENTAGE }}" >> .env
          echo "APP_ACCOMODATION_BUDGET_PERCENTAGE=${{ secrets.PRODUCTION_APP_ACCOMODATION_BUDGET_PERCENTAGE }}" >> .env

      - name: Use Node.js 14.x
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"
          cache: "yarn"

      - uses: borales/actions-yarn@v3.0.0
        with:
          cmd: install

      # DEVELOPMENT
      - name: Copy repository contents via scp
        if: ${{ steps.extract_branch.outputs.branch == 'DEVELOPMENT' }}
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.DEVELOPMENT_HOST }}
          USERNAME: ${{ secrets.DEVELOPMENT_USERNAME }}
          PORT: ${{ secrets.DEVELOPMENT_PORT }}
          KEY: ${{ secrets.DEVELOPMENT_SSHKEY }}
        with:
          source: "."
          target: "/home/cyril/dev-orgatrips-back"
          rm: true

      - name: Executing remote command
        if: ${{ steps.extract_branch.outputs.branch == 'DEVELOPMENT' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEVELOPMENT_HOST }}
          USERNAME: ${{ secrets.DEVELOPMENT_USERNAME }}
          PORT: ${{ secrets.DEVELOPMENT_PORT }}
          KEY: ${{ secrets.DEVELOPMENT_SSHKEY }}
          script: |
            docker ps -q --filter "name=dev-orgatrips-back" | grep -q . && docker stop dev-orgatrips-back && docker container rm dev-orgatrips-back
            docker build -t dev-orgatrips-back /home/cyril/dev-orgatrips-back/
            docker run -d --network reverse-proxy --ip 172.18.0.6 --name dev-orgatrips-back -t dev-orgatrips-back

      # PRODUCTION
      - name: Copy repository contents via scp PRODUCTION
        if: ${{ steps.extract_branch.outputs.branch == 'PRODUCTION' }}
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USERNAME: ${{ secrets.PRODUCTION_USERNAME }}
          PORT: ${{ secrets.PRODUCTION_PORT }}
          KEY: ${{ secrets.PRODUCTION_SSHKEY }}
        with:
          source: "."
          target: "/home/cyril/orgatrips-back"
          rm: true

      - name: Executing remote command PRODUCTION
        if: ${{ steps.extract_branch.outputs.branch == 'PRODUCTION' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          USERNAME: ${{ secrets.PRODUCTION_USERNAME }}
          PORT: ${{ secrets.PRODUCTION_PORT }}
          KEY: ${{ secrets.PRODUCTION_SSHKEY }}
          script: |
            docker ps -q --filter "name=orgatrips-back" | grep -q . && docker stop orgatrips-back && docker container rm orgatrips-back
            docker build -t orgatrips-back /home/cyril/orgatrips-back/
            docker run -d --network reverse-proxy --ip 172.18.0.8 --name orgatrips-back -t orgatrips-back
